Description: A CloudFormation template created for ENPM809J pentest exercises
Parameters:
  awsAdministratorAccessPolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/AdministratorAccess'
    Description: AWS AdministratorAccess Policy
Resources:
  PentestVpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
  PentestSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/27
      MapPublicIpOnLaunch: true
      VpcId: !Ref PentestVpc
  PublicNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref PentestVpc
# Allow inbound SSH connections from anywhere, and block all else.
  InboundPublicNACLEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 101
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 22
        To: 22
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
# Allow all outbound traffic
  OutboundPublicNACLEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
# Attach NACL to subnet
  PentestSubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties: 
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PentestSubnet
# Create role from existing AWS managed policy
  AdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AdminRole
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref awsAdministratorAccessPolicy #Use the AWS managed policy from Parameters section
# create instance profile from role
  AdminInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref AdminRole
# create EC2 on subnet and use instance profile
  EC2PentestInstance:
    Type: AWS::EC2::Instance
    Version: '2009-05-15'
    Properties:
      ImageId: ami-0b898040803850657 # Amazon Linux 2 AMI (HVM), SSD Volume Type 
      InstanceType: t2.micro
      IamInstanceProfile:
        !Ref AdminInstanceProfile
      SubnetId: !Ref PentestSubnet
# create the user
  DevOpsUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: myP@ssW0rd
      Policies:
      - PolicyName: DevOpsUserPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement: 
          - Effect: Allow
            Action:
            - iam:CreateInstanceProfile
            - iam:PassRole
            - iam:ListInstanceProfiles
            - iam:AddRoleToInstanceProfile
            - ec2:AssociateIamInstanceProfile
            Resource:
            - arn:aws:iam::*:instance-profile/*
            - arn:aws:iam::*:role/*
            - arn:aws:ec2:*:*:instance/*
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:RunInstances
            - ec2:CreateKeyPair
            Resource: '*'
# create key for AWS CLI access
  DevOpsAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        !Ref DevOpsUser
# Send key information to the "outputs" tab of the cloudformation "stack details" page.
Outputs: 
  DevOpsAccessKeyID: 
    Value: !Ref DevOpsAccessKey
  DevOpsSecretAccessKey:
    Value: !GetAtt DevOpsAccessKey.SecretAccessKey
